# The following code is a prompts the user for vectors in a frame and verifies whether or not it is a frame or not. 
"""
Notes:
Necessary components include:
ask for size of space, prompting (1 + the size of the space) number of inputs
ask user to input each frame along with the corresponding coefficients
prompt for a vector x

Task:
calculate the sum of the inner products
the result must satsify the bound.

*Draft 1: Used vectors to calculate the frame coefficient and check whether the bounds are satisfied or not.
"""

import math

class Vector:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __add__(self, other):
        return Vector(self.x + other.x, self.y + other.y)

    def __sub__(self, other):
        return Vector(self.x - other.x, self.y - other.y)

    def __mul__(self, scalar):
        return Vector(self.x * scalar, self.y * scalar)
    
    def __rmul__(self, scalar):
        return self.__mul__(scalar)
    
    def __inner__(self, other):
        return (self.x * other.x) + (self.y * other.y)
    
    def __square__(self):
        return self.x ** 2 + self.y ** 2

    def __str__(self):
        return f"({self.x}, {self.y})"

# {Example 1.1} ------------ Parseval Frame
# Defining Your Vectors
v1 = Vector(1, 0)
v2 = Vector(-1/2, math.sqrt(3)/2)
v3 = Vector(-1/2, -math.sqrt(3)/2)

# Multiplying Scalar Onto The Spanning Set
v1 = math.sqrt(2/3) * v1 
v2 = math.sqrt(2/3) * v2 
v3= math.sqrt(2/3) * v3 

# Apply vector x onto spanning set to check if the vector satisfies the bounds
x = Vector(3, 1)

# Calculate Bounds
x_sqr = x.__square__()

# Calculate Inner Products
inner_v1 = v1.__inner__(x) ** 2
inner_v2 = v2.__inner__(x) ** 2
inner_v3 = v3.__inner__(x) ** 2

# Calculate Total Inner Product
total_inner = int(round(inner_v1 + inner_v2 + inner_v3))

# Check if the Bounds are Satisfied
print("-----------")
print(f"{x_sqr}A <= {total_inner} <= {x_sqr}B")

# Print All
print(f"Vector x: {x}")
print(f"x squared: {x_sqr}")
print(f"Total inner product squared: {total_inner}")
print(f"Inner products: v1={inner_v1}, v2={inner_v2}, v3={inner_v3}")



# {Example 1.2} ------------ Regular Frame
# Defining Your Vectors
v1 = Vector(1, 0)
v2 = Vector(0, 1)
v3 = Vector(1, 1)

# Multiplying Scalar Onto The Spanning Set
# v1 = math.sqrt(2/3) * v1 
# v2 = math.sqrt(2/3) * v2 
# v3= math.sqrt(2/3) * v3 

# Apply vector x onto spanning set to check if the vector satisfies the bounds
x = Vector(1, 2)

# Calculate Bounds
x_sqr = x.__square__()

# Calculate Inner Products
inner_v1 = v1.__inner__(x) ** 2
inner_v2 = v2.__inner__(x) ** 2
inner_v3 = v3.__inner__(x) ** 2

# Calculate Inner Product
total_inner = inner_v1 + inner_v2 + inner_v3

# Check if the Bounds are Satisfied
print("-----------")
print(f"{x_sqr}A <= {total_inner} <= {x_sqr}B")

# Print All
print(f"Vector x: {x}")
print(f"x squared: {x_sqr}")
print(f"Total inner product squared: {total_inner}")
print(f"Inner products: v1={inner_v1}, v2={inner_v2}, v3={inner_v3}")


# {Example 1.3} ------------ Not a Frame
# Defining Your Vectors
v1 = Vector(1, 0)
v2 = Vector(0, 1)
v3 = Vector(2, 2)

# Multiplying Scalar Onto The Spanning Set
# v1 = math.sqrt(2/3) * v1 
# v2 = math.sqrt(2/3) * v2 
# v3= math.sqrt(2/3) * v3 

# Apply vector x onto spanning set to check if the vector satisfies the bounds
x = Vector(1, 2)

# Calculate Bounds
x_sqr = x.__square__()

# Calculate Inner Product
inner_v1 = v1.__inner__(x) ** 2
inner_v2 = v2.__inner__(x) ** 2
inner_v3 = v3.__inner__(x) ** 2

# Calculate Total Inner Product
total_inner = inner_v1 + inner_v2 + inner_v3

# Check if the Bounds are Satisfied
print("-----------")
print(f"{x_sqr}A <= {total_inner} <= {x_sqr}B")

# Print All
print(f"Vector x: {x}")
print(f"x squared: {x_sqr}")
print(f"Total inner product squared: {total_inner}")
print(f"Inner products: v1={inner_v1}, v2={inner_v2}, v3={inner_v3}")

